hydra:
  run:
    dir: outputs/${now:%Y-%m-%d}/${now:%H-%M-%S}
  sweep:
    dir: multirun/${now:%Y-%m-%d}/${now:%H-%M-%S}
    subdir: ${hydra.job.num}
  launcher:
    _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
    n_jobs: -1
    backend: null
    prefer: processes
    require: null
    verbose: 0
    timeout: null
    pre_dispatch: 2*n_jobs
    batch_size: auto
    temp_folder: null
    max_nbytes: null
    mmap_mode: r
  sweeper:
    _target_: hydra._internal.core_plugins.basic_sweeper.BasicSweeper
    max_batch_size: null
    params:
      hyperparameters.training.learning_rate:
      - 0.001
      - 1.0e-05
      hyperparameters.training.discount_factor:
      - 0.5
      - 0.8
      - 0.99
      hyperparameters.training.max_episode_steps:
      - 20
      - 30
      - 40
      hyperparameters.training.batch_size:
      - 128
      - 256
  help:
    app_name: ${hydra.job.name}
    header: '${hydra.help.app_name} is powered by Hydra.

      '
    footer: 'Powered by Hydra (https://hydra.cc)

      Use --hydra-help to view Hydra specific help

      '
    template: '${hydra.help.header}

      == Configuration groups ==

      Compose your configuration from those groups (group=option)


      $APP_CONFIG_GROUPS


      == Config ==

      Override anything in the config (foo.bar=value)


      $CONFIG


      ${hydra.help.footer}

      '
  hydra_help:
    template: 'Hydra (${hydra.runtime.version})

      See https://hydra.cc for more info.


      == Flags ==

      $FLAGS_HELP


      == Configuration groups ==

      Compose your configuration from those groups (For example, append hydra/job_logging=disabled
      to command line)


      $HYDRA_CONFIG_GROUPS


      Use ''--cfg hydra'' to Show the Hydra config.

      '
    hydra_help: ???
  hydra_logging:
    version: 1
    formatters:
      simple:
        format: '[%(asctime)s][HYDRA] %(message)s'
    handlers:
      console:
        class: logging.StreamHandler
        formatter: simple
        stream: ext://sys.stdout
    root:
      level: INFO
      handlers:
      - console
    loggers:
      logging_example:
        level: DEBUG
    disable_existing_loggers: false
  job_logging:
    version: 1
    formatters:
      simple:
        format: '[%(asctime)s][%(name)s][%(levelname)s] - %(message)s'
    handlers:
      console:
        class: logging.StreamHandler
        formatter: simple
        stream: ext://sys.stdout
      file:
        class: logging.FileHandler
        formatter: simple
        filename: ${hydra.runtime.output_dir}/${hydra.job.name}.log
    root:
      level: INFO
      handlers:
      - console
      - file
    disable_existing_loggers: false
  env: {}
  mode: MULTIRUN
  searchpath: []
  callbacks: {}
  output_subdir: .hydra
  overrides:
    hydra:
    - hydra.mode=MULTIRUN
    task:
    - task=1,2,3,4,5
  job:
    name: fromStableBaselines
    chdir: null
    override_dirname: task=1,2,3,4,5
    id: ???
    num: ???
    config_name: config
    env_set: {}
    env_copy: []
    config:
      override_dirname:
        kv_sep: '='
        item_sep: ','
        exclude_keys: []
  runtime:
    version: 1.3.2
    version_base: '1.3'
    cwd: /Users/josdan/stuff/development/MemoryReactivePolicy
    config_sources:
    - path: hydra.conf
      schema: pkg
      provider: hydra
    - path: /Users/josdan/stuff/development/MemoryReactivePolicy/conf
      schema: file
      provider: main
    - path: ''
      schema: structured
      provider: schema
    output_dir: ???
    choices:
      logging: default
      hyperparameters: ppo
      environment: gridverse
      algorithm: ppo
      hydra/env: default
      hydra/callbacks: null
      hydra/job_logging: default
      hydra/hydra_logging: default
      hydra/hydra_help: default
      hydra/help: default
      hydra/sweeper: basic
      hydra/launcher: joblib
      hydra/output: default
  verbose: false
algorithm:
  activation_fn: Tanh
  use_sde: false
  use_expln: false
  feature_extractor:
    share_feature_extractor: true
    grid_encoder:
      embedding_dim: 32
      type: cnn
      output_dim: 32
      conv_layers:
      - in_channels: ${...embedding_dim}
        out_channels: 32
        kernel_size: 3
        stride: 1
        padding: 0
    agent_id_encoder:
      type: cnn
      output_dim: 32
      conv_layers:
      - in_channels: 1
        out_channels: 32
        kernel_size: 3
        stride: 1
        padding: 0
    items_encoder:
      embedding_dim: 8
      layers:
      - 64
      - 32
  lstm:
    enable_critic_lstm: false
    shared_lstm: false
    lstm_hidden_size: 256
    n_lstm_layers: 1
  mlp:
    policy_net:
      lstm_output_to_latent_features:
      - 128
      - 64
      - 32
    value_net:
      lstm_output_to_latent_features:
      - 128
      - 64
      - 32
  training:
    num_env_steps_for_each_gradient_update: 256
    num_epochs_optimizing_surrogate_loss: 10
    gae_lambda: 0.95
    clip_range: 0.2
    clip_range_vf: null
    normalize_advantage: true
    ent_coef: 0.0
    vf_coef: 0.5
    max_grad_norm: 0.5
    target_kl: null
  testing:
    max_episode_steps: 25
    n_eval_episodes: 100
environment:
  number_of_envs_to_run_parallelly: 1
hyperparameters:
  training:
    discount_factor: 0.5
    learning_rate: 0.01
    max_episode_steps: 30
    total_num_steps: 100000.0
    batch_size: 128
    num_env_steps_for_each_gradient_update: 256
    num_epochs_optimizing_surrogate_loss: 10
    gae_lambda: 0.95
    clip_range: 0.2
    clip_range_vf: null
    normalize_advantage: true
    ent_coef: 0.0
    vf_coef: 0.5
    max_grad_norm: 0.5
    target_kl: null
logging:
  training:
    log_episode_interval: 2
    stats_episode_window_size: 100
  testing:
    video:
      record_step_interval: 1
      length: 25
      fps: 4
seed: 0
gridverse_env: gv_keydoor.9x9.yaml
